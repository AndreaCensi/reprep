jobs:
  test-3.8-production:
    docker:
    - {image: python:3.8}
    environment: {COLUMNS: '160', COVER_PACKAGES: 'reprep_tests,reprep,reprep.report_utils.statistics.structures.storage,reprep.report_utils.statistics.structures,reprep.interface,reprep.report_utils,reprep.demos,reprep.report_utils.storing.store_results_array,reprep.report_utils.statistics.structures.reduction_display,reprep.figure,reprep.output.ipn.node,reprep.report_utils.statistics.tables.tables_misc_test,reprep.report_utils.statistics.library.reductions_display,reprep.demos.demo_tests,reprep.plot_utils.spines,reprep.mime_extensions,reprep.output.hdf.hdf1_rawdata,reprep.report_utils.statistics.tables.tables_misc,reprep.report_utils.statistics.library,reprep.constants,reprep.plot_utils.axes,reprep.graphics.zoom,reprep.repcontracts,reprep.report_utils.storing,reprep.report_utils.storing.store_results_dict,reprep.report_utils.storing.store_results,reprep.graphics.conversions,reprep.graphics.filter_colormap,reprep.plot_utils,reprep.node,reprep.table,reprep.graphics.filter_posneg,reprep.output.hdf.test_hdf,reprep.graphics.numpy_utils,reprep.output.hdf.hdf1_read,reprep.output.html_test,reprep.demos.table,reprep.report_utils.statistics.structures.function_with_description,reprep.output.hdf.hdf1_write,reprep.graphics.filter_scale,reprep.utils.natsorting,reprep.demos.report_layout,reprep.output.hdf,reprep.helpers,reprep,reprep.demos.manager,reprep.utils.deprecation,reprep.demos.colormaps,reprep.demos.spines,reprep.plot_utils.styles,reprep.report_utils.statistics.library.reductions,reprep.structures,reprep.datanode,reprep.output.html,reprep.graphics.filter_posneg_test,reprep.report_utils.statistics.structures.reduction,reprep.utils,reprep.demos.figures,reprep_tables.make_tables,reprep.mpl,reprep.config,reprep.report_utils.statistics.structures.data_view,reprep_tables,reprep.output,reprep.report_utils.statistics.structures.with_description,reprep.graphics.success,reprep.output.hdf.hdf_read,reprep.report_utils.statistics.structures.with_description_utils,reprep.report_utils.statistics,reprep.graphics,reprep.output.ipn,reprep.types,reprep.report_utils.statistics.tables,reprep.graphics.conversions_tests,reprep.graphics.scaling,reprep.utils.frozen',
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,
      TEST_PACKAGES: reprep_tests reprep}
    steps:
    - checkout
    - run: {command: "mkdir -p  build-stats\nenv | tee  build-stats/env.txt\n", name: Build
          stats (1)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "pip3 install -U pip\npip3 install pipdeptree coverage shyaml\n\
          \nshyaml get-values install_requires < project.pp1.yaml > .requirements.txt\n\
          pip3 install  -r .requirements.txt\nrm .requirements.txt\n", name: Install
          deps}
    - run: {command: "shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt\n\
          pip3 install -r .requirements_tests.txt\nrm .requirements_tests.txt\n\n\
          pip install \t\tpipdeptree==0.13.2\t\tbump2version\t\tnose==1.3.7\t\tnose2==0.10\t\
          \tnose2-html-report==0.6.0\t\tnose-parallel==0.4.0\t\tnose_xunitmp==0.4.1\t\
          \tpre-commit==2.11.1\t\trednose==1.3.0\t\tcoverage\tsphinx\t\tsphinx-rtd-theme\n",
        name: Install testing deps}
    - run: {command: "echo TERM = $TERM\n\npipdeptree | tee  build-stats/pipdeptree.txt\n\
          pip list   | tee  build-stats/pip-list.txt\npip freeze | tee  build-stats/pip-freeze.txt\n",
        name: Build stats (2)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "python setup.py develop --prefix ~/.local --no-deps\n", name: setup.py
          develop}
    - run: {command: "FILE=src/conf.py\nmkdir -p out/docs\nif test -f \"$FILE\"; then\n\
          \    sphinx-build src out/docs\nfi\n", name: Make docs}
    - store_artifacts: {destination: docs, path: out/docs, when: always}
    - run: {command: "mkdir -p out/test-results\nxunit_output=out/test-results/nose-${CIRCLE_NODE_INDEX}-xunit.xml\n\
          \n#              --processes=8 --process-timeout=1000 --process-restartworker\
          \ \\\n# --cover-packages=${COVER_PACKAGES} \\\nnosetests \\\n  --rednose\
          \ --immediate \\\n  --cover-tests --with-coverage \\\n  --with-xunitmp --xunitmp-file=${xunit_output}\
          \ \\\n  --cover-packages=${COVER_PACKAGES} \\\n  ${TEST_PACKAGES}\n", name: Run
          tests}
    - store_test_results: {path: out/test-results, when: always}
    - run: {command: "coverage combine\ncoverage html -d out/coverage\ncoverage xml\n",
        name: Coverage report, when: always}
    - store_artifacts: {destination: coverage, path: out/coverage, when: always}
    - store_artifacts: {destination: tests, path: out/tests, when: always}
    - run: {command: "bash <(curl -s https://codecov.io/bash)\n", name: CodeCov, when: always}
    working_directory: ~/repo
  test-3.8-staging:
    docker:
    - {image: python:3.8}
    environment: {COLUMNS: '160', COVER_PACKAGES: 'reprep_tests,reprep,reprep.report_utils.statistics.structures.storage,reprep.report_utils.statistics.structures,reprep.interface,reprep.report_utils,reprep.demos,reprep.report_utils.storing.store_results_array,reprep.report_utils.statistics.structures.reduction_display,reprep.figure,reprep.output.ipn.node,reprep.report_utils.statistics.tables.tables_misc_test,reprep.report_utils.statistics.library.reductions_display,reprep.demos.demo_tests,reprep.plot_utils.spines,reprep.mime_extensions,reprep.output.hdf.hdf1_rawdata,reprep.report_utils.statistics.tables.tables_misc,reprep.report_utils.statistics.library,reprep.constants,reprep.plot_utils.axes,reprep.graphics.zoom,reprep.repcontracts,reprep.report_utils.storing,reprep.report_utils.storing.store_results_dict,reprep.report_utils.storing.store_results,reprep.graphics.conversions,reprep.graphics.filter_colormap,reprep.plot_utils,reprep.node,reprep.table,reprep.graphics.filter_posneg,reprep.output.hdf.test_hdf,reprep.graphics.numpy_utils,reprep.output.hdf.hdf1_read,reprep.output.html_test,reprep.demos.table,reprep.report_utils.statistics.structures.function_with_description,reprep.output.hdf.hdf1_write,reprep.graphics.filter_scale,reprep.utils.natsorting,reprep.demos.report_layout,reprep.output.hdf,reprep.helpers,reprep,reprep.demos.manager,reprep.utils.deprecation,reprep.demos.colormaps,reprep.demos.spines,reprep.plot_utils.styles,reprep.report_utils.statistics.library.reductions,reprep.structures,reprep.datanode,reprep.output.html,reprep.graphics.filter_posneg_test,reprep.report_utils.statistics.structures.reduction,reprep.utils,reprep.demos.figures,reprep_tables.make_tables,reprep.mpl,reprep.config,reprep.report_utils.statistics.structures.data_view,reprep_tables,reprep.output,reprep.report_utils.statistics.structures.with_description,reprep.graphics.success,reprep.output.hdf.hdf_read,reprep.report_utils.statistics.structures.with_description_utils,reprep.report_utils.statistics,reprep.graphics,reprep.output.ipn,reprep.types,reprep.report_utils.statistics.tables,reprep.graphics.conversions_tests,reprep.graphics.scaling,reprep.utils.frozen',
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,
      TEST_PACKAGES: reprep_tests reprep}
    steps:
    - checkout
    - run: {command: "mkdir -p  build-stats\nenv | tee  build-stats/env.txt\n", name: Build
          stats (1)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "pip3 install -U pip\npip3 install pipdeptree coverage shyaml\n\
          \nshyaml get-values install_requires < project.pp1.yaml > .requirements.txt\n\
          pip3 install  -r .requirements.txt\nrm .requirements.txt\n", name: Install
          deps}
    - run: {command: "shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt\n\
          pip3 install -r .requirements_tests.txt\nrm .requirements_tests.txt\n\n\
          pip install \t\tpipdeptree==0.13.2\t\tbump2version\t\tnose==1.3.7\t\tnose2==0.10\t\
          \tnose2-html-report==0.6.0\t\tnose-parallel==0.4.0\t\tnose_xunitmp==0.4.1\t\
          \tpre-commit==2.11.1\t\trednose==1.3.0\t\tcoverage\tsphinx\t\tsphinx-rtd-theme\n",
        name: Install testing deps}
    - run: {command: "echo TERM = $TERM\n\npipdeptree | tee  build-stats/pipdeptree.txt\n\
          pip list   | tee  build-stats/pip-list.txt\npip freeze | tee  build-stats/pip-freeze.txt\n",
        name: Build stats (2)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "python setup.py develop --prefix ~/.local --no-deps\n", name: setup.py
          develop}
    - run: {command: "FILE=src/conf.py\nmkdir -p out/docs\nif test -f \"$FILE\"; then\n\
          \    sphinx-build src out/docs\nfi\n", name: Make docs}
    - store_artifacts: {destination: docs, path: out/docs, when: always}
    - run: {command: "mkdir -p out/test-results\nxunit_output=out/test-results/nose-${CIRCLE_NODE_INDEX}-xunit.xml\n\
          \n#              --processes=8 --process-timeout=1000 --process-restartworker\
          \ \\\n# --cover-packages=${COVER_PACKAGES} \\\nnosetests \\\n  --rednose\
          \ --immediate \\\n  --cover-tests --with-coverage \\\n  --with-xunitmp --xunitmp-file=${xunit_output}\
          \ \\\n  --cover-packages=${COVER_PACKAGES} \\\n  ${TEST_PACKAGES}\n", name: Run
          tests}
    - store_test_results: {path: out/test-results, when: always}
    - run: {command: "coverage combine\ncoverage html -d out/coverage\ncoverage xml\n",
        name: Coverage report, when: always}
    - store_artifacts: {destination: coverage, path: out/coverage, when: always}
    - store_artifacts: {destination: tests, path: out/tests, when: always}
    - run: {command: "bash <(curl -s https://codecov.io/bash)\n", name: CodeCov, when: always}
    working_directory: ~/repo
version: 2
workflows:
  test:
    jobs:
    - test-3.8-staging:
        context: pip-staging
        filters:
          branches: {only: /z7-stage.*/}
    - test-3.8-production:
        context: z7-production
        filters:
          branches: {ignore: /z7-stage.*/}
  version: 2

# sigil c1af81075656bcfbe73e52f7469d1da6
